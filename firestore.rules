rules_version = '2';  
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isOwner(docData) {
      // Handles both `ownerId` (projects, models) and `userId` (agents) fields.
      return request.auth != null && (request.auth.uid == docData.ownerId || request.auth.uid == docData.userId);
    }

    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.permissions.isAdmin == true;
    }

    // --- Users Collection ---
    match /users/{userId} {
      allow get: if request.auth.uid == userId || isAdmin();
      allow list: if isAdmin();
      // Users can create their own profile upon first sign-in.
      allow create: if request.auth.uid == userId && !("permissions" in request.resource.data);
      // Users can update non-permission fields; Admins can update permissions.
      allow update: if (request.auth.uid == userId &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['lastLoginAt', 'email', 'displayName', 'photoURL', 'updatedAt']))
                    || (isAdmin() &&
                       request.resource.data.diff(resource.data).affectedKeys().hasAny(['permissions', 'permissionsLastUpdatedAt']));
      allow delete: if isAdmin();
    }

    // --- Projects Collection ---
    match /projects/{projectId} {
      // NOTE: For now, any authenticated user can read any project.
      allow get, list: if request.auth != null;
      allow create, delete: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update: if isOwner(resource.data) || isAdmin();
    }

    // --- Models Collection ---
    match /models/{modelId} {
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      // Read if owner, public, or admin. List if authenticated (for queries).
      allow get: if isOwner(resource.data) || resource.data.isPublic == true || isAdmin();
      allow list: if request.auth != null;
      allow update, delete: if isOwner(resource.data) || isAdmin();
    }

    // --- Agents Collection ---
    match /agents/{agentId} {
      function isAgentPublic() { return resource.data.isPublic == true; }

      allow create: if request.auth.uid == request.resource.data.userId;
      allow get: if isOwner(resource.data) || isAgentPublic() || isAdmin();
      allow list: if request.auth != null;
      // Write if owner or admin, but don't let them change the owner.
      allow update: if (isOwner(resource.data) || isAdmin()) && request.resource.data.userId == resource.data.userId;
      allow delete: if isOwner(resource.data) || isAdmin();

      // LEGACY: Agent Runs subcollection is deprecated and should no longer be written to.
      // Read access is maintained for viewing any historical data that may still exist.
      match /runs/{runId} {
        allow read: if request.auth != null;
        allow write: if false; // Deny all new writes.
      }
    }

    // --- Chats Collection ---
    match /chats/{chatId} {
      // NOTE: For now, any authenticated user can read/write to any chat.
      // This will be restricted by project membership in a future iteration.
      allow read, write: if request.auth != null;

      // Messages Subcollection
      match /messages/{messageId} {
        // Inherits parent chat permissions. Open for now.
        allow read, write: if request.auth != null;

        // NEW: Events Subcollection
        // Stores the detailed reasoning log for an assistant message.
        match /events/{eventId} {
          // Permissions should match the parent message.
          allow read, write: if request.auth != null;
        }
      }
    }

    // --- Gofannon Tool Manifest ---
    match /gofannonToolManifest/{docId} {
      allow read: if request.auth != null;
      allow write: if isAdmin(); // Only admins can update the manifest.
    }
  }
}